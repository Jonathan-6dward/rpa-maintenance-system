#!/bin/bash

# Script para visualizar e analisar relat√≥rios de manuten√ß√£o
# Mostra os resultados da auditoria de forma amig√°vel
# Criado por Jonathan Edward

# Diret√≥rio de logs
LOG_DIR="$HOME/Logs"

# Fun√ß√£o para mostrar √∫ltimo relat√≥rio
show_latest_report() {
    echo "=== √öLTIMO RELAT√ìRIO DE MANUTEN√á√ÉO ==="
    
    # Encontrar o arquivo de relat√≥rio mais recente
    LATEST_JSON=$(find "$LOG_DIR" -name "report_*.json" -printf '%T@ %p\n' 2>/dev/null | sort -n -r | head -n 1 | cut -d' ' -f2-)
    LATEST_SUMMARY=$(find "$LOG_DIR" -name "summary_*.txt" -printf '%T@ %p\n' 2>/dev/null | sort -n -r | head -n 1 | cut -d' ' -f2-)
    
    if [ -n "$LATEST_JSON" ] && [ -f "$LATEST_JSON" ]; then
        echo "Arquivo JSON: $(basename "$LATEST_JSON")"
        echo ""
        
        # Exibir informa√ß√µes principais do JSON
        TIMESTAMP=$(jq -r '.timestamp' "$LATEST_JSON" 2>/dev/null)
        NETWORK_STATUS=$(jq -r '.network_status' "$LATEST_JSON" 2>/dev/null)
        SECURITY_STATUS=$(jq -r '.security_status' "$LATEST_JSON" 2>/dev/null)
        DOCKER_STATUS=$(jq -r '.docker_status' "$LATEST_JSON" 2>/dev/null)
        DEPENDENCIES_STATUS=$(jq -r '.dependencies_status' "$LATEST_JSON" 2>/dev/null)
        PERFORMANCE_STATUS=$(jq -r '.performance_status' "$LATEST_JSON" 2>/dev/null)
        CLEANUP_STATUS=$(jq -r '.cleanup_status' "$LATEST_JSON" 2>/dev/null)
        UPDATES_PENDING=$(jq -r '.updates_pending' "$LATEST_JSON" 2>/dev/null)
        DISK_BEFORE=$(jq -r '.disk_usage_before' "$LATEST_JSON" 2>/dev/null)
        DISK_AFTER=$(jq -r '.disk_usage_after' "$LATEST_JSON" 2>/dev/null)
        ACTION_SUMMARY=$(jq -r '.action_summary' "$LATEST_JSON" 2>/dev/null)
        
        echo "Timestamp: $TIMESTAMP"
        echo ""
        echo "üìä STATUS:"
        echo "  Rede: $NETWORK_STATUS"
        echo "  Seguran√ßa: $SECURITY_STATUS"
        echo "  Docker: $DOCKER_STATUS"
        echo "  Depend√™ncias: $DEPENDENCIES_STATUS"
        echo "  Performance: $PERFORMANCE_STATUS"
        echo "  Limpeza: $CLEANUP_STATUS"
        echo ""
        echo "üìà METRICAS:"
        echo "  Atualiza√ß√µes pendentes: $UPDATES_PENDING"
        echo "  Uso de disco antes: $DISK_BEFORE"
        echo "  Uso de disco ap√≥s: $DISK_AFTER"
        echo ""
        echo "üìù Resumo: $ACTION_SUMMARY"
        echo ""
    else
        echo "Nenhum relat√≥rio JSON encontrado."
    fi
    
    if [ -n "$LATEST_SUMMARY" ]; then
        echo "=== RESUMO ==="
        cat "$LATEST_SUMMARY"
        echo ""
    else
        echo "Nenhum resumo encontrado."
        echo ""
    fi
}

# Fun√ß√£o para gerar estat√≠sticas
show_statistics() {
    echo "=== ESTAT√çSTICAS DE MANUTEN√á√ÉO ==="
    
    # Contar n√∫mero de relat√≥rios
    REPORTS_COUNT=$(find "$LOG_DIR" -name "report_*.json" 2>/dev/null | wc -l)
    SUMMARY_COUNT=$(find "$LOG_DIR" -name "summary_*.txt" 2>/dev/null | wc -l)
    LOGS_COUNT=$(find "$LOG_DIR" -name "complete_maintenance_*.log" 2>/dev/null | wc -l)
    
    echo "Total de relat√≥rios gerados: $REPORTS_COUNT"
    echo "Total de resumos gerados: $SUMMARY_COUNT"
    echo "Total de logs de manuten√ß√£o: $LOGS_COUNT"
    echo ""
    
    # Mostrar √∫ltimos 5 relat√≥rios
    if [ "$REPORTS_COUNT" -gt 0 ]; then
        echo " √∫ltimos 5 relat√≥rios:"
        find "$LOG_DIR" -name "report_*.json" -printf '%T@ %p\n' 2>/dev/null | sort -n -r | head -n 5 | while read -r _ file; do
            TIMESTAMP=$(basename "$file" | sed 's/report_\(.*\)\.json/\1/')
            DATE_FORMAT=$(echo "$TIMESTAMP" | sed 's/\(....\)\(..\)\(..\)_\(..\)\(..\)\(..\)/\3\/\2\/\1 \4:\5:\6/')
            echo "  - $DATE_FORMAT"
        done
        echo ""
    fi
}

# Fun√ß√£o para verificar pend√™ncias
show_pending_items() {
    echo "=== PEND√äNCIAS IDENTIFICADAS ==="
    
    # Procurar no √∫ltimo log por itens pendentes
    LATEST_LOG=$(find "$LOG_DIR" -name "complete_maintenance_*.log" -printf '%T@ %p\n' 2>/dev/null | sort -n -r | head -n1 | cut -d' ' -f2-)
    
    if [ -n "$LATEST_LOG" ] && [ -f "$LATEST_LOG" ]; then
        UPDATES_PENDING=$(grep -ci "atualiza√ß√µes\|upgrade\|packages" "$LATEST_LOG")
        SECURITY_ISSUES=$(grep -ci "security\|vulnerab\|senha\|permiss√£o\|permissao" "$LATEST_LOG")
        DOCKER_ISSUES=$(grep -ci "container\|docker\|image" "$LATEST_LOG" | grep -ci "error\|issue\|problem")
        PERFORMANCE_ISSUES=$(grep -ci "alto\|alto uso\|lentid\|lento\|memory" "$LATEST_LOG")
        
        echo "  Atualiza√ß√µes pendentes identificadas: $UPDATES_PENDING"
        echo "  Quest√µes de seguran√ßa identificadas: $SECURITY_ISSUES"
        echo "  Problemas com Docker identificados: $DOCKER_ISSUES"
        echo "  Quest√µes de performance identificadas: $PERFORMANCE_ISSUES"
        echo ""
        
        # Mostrar detalhes das atualiza√ß√µes pendentes se houver
        if [ "$UPDATES_PENDING" -gt 0 ]; then
            echo "  Detalhes das atualiza√ß√µes pendentes:"
            grep -A 10 -i "atualiza√ß√µes\|upgrade\|packages" "$LATEST_LOG" | head -15 | sed 's/^/    /'
            echo ""
        fi
    else
        echo "  Nenhum log encontrado para an√°lise de pend√™ncias."
        echo ""
    fi
}

# Menu principal
case "$1" in
    "latest")
        show_latest_report
        ;;
    "stats")
        show_statistics
        ;;
    "pending")
        show_pending_items
        ;;
    "all")
        show_latest_report
        show_statistics
        show_pending_items
        ;;
    *)
        echo "Uso: $0 {latest|stats|pending|all}"
        echo "  latest  - Mostra o √∫ltimo relat√≥rio de manuten√ß√£o"
        echo "  stats   - Mostra estat√≠sticas de manuten√ß√£o"
        echo "  pending - Mostra pend√™ncias identificadas"
        echo "  all     - Mostra todas as informa√ß√µes acima"
        echo ""
        show_latest_report
        ;;
esac